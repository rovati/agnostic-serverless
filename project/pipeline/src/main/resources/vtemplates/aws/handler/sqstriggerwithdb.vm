package $package;

import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import java.io.IOException;

import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.ProducerTemplate;
import org.apache.commons.dbcp.BasicDataSource;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.SQSBatchResponse;
import com.amazonaws.services.lambda.runtime.events.SQSEvent;
import com.amazonaws.services.lambda.runtime.events.SQSEvent.SQSMessage;

import com.fasterxml.jackson.jr.ob.JSON;
import com.fasterxml.jackson.jr.ob.JSONObjectException;

import ch.elca.rovl.queuecomponent.QueueEndpoint;

import jakarta.enterprise.inject.Produces;
import jakarta.inject.Inject;
import jakarta.inject.Named;

public class TriggerHandler implements RequestHandler<SQSEvent, SQSBatchResponse> {

    @Inject
    CamelContext camelContext;
    @Inject
    ProducerTemplate template;

$databaseSources

    @Override
    public SQSBatchResponse handleRequest(SQSEvent event, Context context) {
        context.getLogger().log("Lambda triggered! sqs event");

        List<SQSBatchResponse.BatchItemFailure> batchItemFailures = new ArrayList<SQSBatchResponse.BatchItemFailure>();
        
        // create local endpoint to push exchange to route
        QueueEndpoint endpoint = camelContext.getEndpoint("queue://$queueName", QueueEndpoint.class);
        endpoint.setUseDirectProducer(true);
        
        for (SQSMessage m : event.getRecords()) {
            // create exchange with message content
            Exchange exchange = endpoint.createExchange();
            try {
                deserializeExchange(exchange, m.getBody());
            } catch(IOException e) {
                context.getLogger().log("Failed to deserialized Exchange.");
                context.getLogger().log(e.getMessage());
                batchItemFailures.add(new SQSBatchResponse.BatchItemFailure(m.getMessageId()));
                continue;
            }

            Exchange out = template.send(endpoint, exchange);

            // if exchange processing has exception, mark message as failed
            if (out.isFailed()) {
                context.getLogger().log(out.getException().getMessage());
                batchItemFailures.add(new SQSBatchResponse.BatchItemFailure(m.getMessageId()));
            }
        }

        return new SQSBatchResponse(batchItemFailures);
    }

    @SuppressWarnings("unchecked")
    private static void deserializeExchange(Exchange ex, String serialized) throws JSONObjectException, IOException  {
        Map<String, Object> content = JSON.std.with(JSON.Feature.PRETTY_PRINT_OUTPUT)
            .beanFrom(HashMap.class, serialized);

        String body = (String) content.get("body");
        Map<String,Object> properties = (Map<String,Object>) content.get("properties");
        Map<String,Object> headers = (Map<String,Object>) content.get("headers");

        ex.getIn().setBody(body);
        for (String key : properties.keySet()) {
            ex.setProperty(key, properties.get(key));
        }
        for (String key : headers.keySet()) {
            ex.getIn().setHeader(key, headers.get(key));
        }
    }
}
