package $package;

import com.microsoft.azure.functions.ExecutionContext;
import com.microsoft.azure.functions.HttpMethod;
import com.microsoft.azure.functions.HttpRequestMessage;
import com.microsoft.azure.functions.HttpResponseMessage;
import com.microsoft.azure.functions.HttpStatus;
import com.microsoft.azure.functions.annotation.AuthorizationLevel;
import com.microsoft.azure.functions.annotation.FunctionName;
import com.microsoft.azure.functions.annotation.HttpTrigger;

import ch.elca.rovl.queuecomponent.QueueEndpoint;

import java.util.Optional;
import java.util.logging.Level;
import java.util.HashMap;
import java.util.Map;

import java.io.IOException;

import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.component.properties.PropertiesComponent;
import org.apache.camel.impl.DefaultCamelContext;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.SignatureException;

import java.util.Base64;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import com.fasterxml.jackson.jr.ob.JSON;
import com.fasterxml.jackson.jr.ob.JSONObjectException;

/**
 * Azure Functions with HTTP Trigger.
 */
public class TriggerHandler {

    /**
     * This function listens at endpoint "/api/$functionName". Two ways to invoke it using "curl" command in bash:
     * 1. curl -d "HTTP Body" {your host}/api/$functionName
     * 2. curl "{your host}/api/$functionName?name=HTTP%20Query"
     * @throws Exception
     */
    @FunctionName("$functionName")
    public HttpResponseMessage run(
            @HttpTrigger(
                name = "req",
                methods = {HttpMethod.POST},
                authLevel = AuthorizationLevel.ANONYMOUS)
                HttpRequestMessage<Optional<String>> request,
            final ExecutionContext context) throws Exception {
        context.getLogger().info("Java HTTP trigger processed a request.");

        /* AUTHORIZATION CHECK */
        String secretKeyStr = System.getenv("JWT_KEY");
        if (secretKeyStr == null) {
            return request.createResponseBuilder(HttpStatus.INTERNAL_SERVER_ERROR).body("Couldn't load jwt key.").build();
        }
        byte[] decodedKey = Base64.getDecoder().decode(secretKeyStr);
        SecretKey key = new SecretKeySpec(decodedKey, 0, decodedKey.length, "HmacSHA256");

        String token = request.getHeaders().get("authorization").replace("Bearer ", "");

        try {
            boolean matches = Jwts.parser().verifyWith(key).build()
                .parseSignedClaims(token).getPayload()
                .getSubject().equals("$functionName");

            if (!matches) {
                return request.createResponseBuilder(HttpStatus.FORBIDDEN).body("Subject of token doesn't match").build();
            }
        } catch(SignatureException e) {
            return request.createResponseBuilder(HttpStatus.FORBIDDEN).body(e.getMessage()).build();
        }


        String body = "";
        if (request.getBody().isPresent())
            body = request.getBody().get();

        // create and start camel context
        try(CamelContext camelContext = new DefaultCamelContext()){
            // set up camel context
            PropertiesComponent pc = new PropertiesComponent();
            pc.setLocation("classpath:application.properties");
            camelContext.setPropertiesComponent(pc);
            camelContext.addRoutes(new FunctionRoute());
            camelContext.start();

            // create local endpoint to push exchange to route
            QueueEndpoint endpoint = camelContext.getEndpoint("queue://$queueName", QueueEndpoint.class);
            endpoint.setUseDirectProducer(true);

            // create exchange with request content
            Exchange exchange = endpoint.createExchange();
            try {
                deserializeExchange(exchange, body);
            } catch(IOException e) {
                context.getLogger().log(Level.SEVERE, "Failed to deserialized Exchange");
                context.getLogger().log(Level.SEVERE, e.getMessage());
                camelContext.stop();
                return request.createResponseBuilder(HttpStatus.INTERNAL_SERVER_ERROR).build();
            }

            // trigger camel route
            ProducerTemplate template = camelContext.createProducerTemplate();
            Exchange out = template.send(endpoint, exchange);

            // if exchange processing has exception
            if (out.isFailed()) {
                Exception e = out.getException();
                context.getLogger().log(Level.SEVERE, e.getMessage());
                camelContext.stop();
                return request.createResponseBuilder(HttpStatus.INTERNAL_SERVER_ERROR).build();
            }

            // shutdown camel context
            camelContext.stop();
        }

        context.getLogger().info("Processing successful. Returning OK response.");
        return request.createResponseBuilder(HttpStatus.OK).build();

    }

    @SuppressWarnings("unchecked")
    private static void deserializeExchange(Exchange ex, String serialized) throws JSONObjectException, IOException  {
        Map<String, Object> content = JSON.std.with(JSON.Feature.PRETTY_PRINT_OUTPUT)
            .beanFrom(HashMap.class, serialized);

        String body = (String) content.get("body");
        Map<String,Object> properties = (Map<String,Object>) content.get("properties");
        Map<String,Object> headers = (Map<String,Object>) content.get("headers");

        ex.getIn().setBody(body);
        for (String key : properties.keySet()) {
            ex.setProperty(key, properties.get(key));
        }
        for (String key : headers.keySet()) {
            ex.getIn().setHeader(key, headers.get(key));
        }
    }

}