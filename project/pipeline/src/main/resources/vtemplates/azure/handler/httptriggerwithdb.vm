package $package;

import com.microsoft.azure.functions.ExecutionContext;
import com.microsoft.azure.functions.HttpMethod;
import com.microsoft.azure.functions.HttpRequestMessage;
import com.microsoft.azure.functions.HttpResponseMessage;
import com.microsoft.azure.functions.HttpStatus;
import com.microsoft.azure.functions.annotation.AuthorizationLevel;
import com.microsoft.azure.functions.annotation.FunctionName;
import com.microsoft.azure.functions.annotation.HttpTrigger;
import java.util.Optional;
import java.util.logging.Level;
import java.util.List;

import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.component.properties.PropertiesComponent;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.commons.dbcp.BasicDataSource;

import ch.elca.rovl.functioncomponent.FunctionEndpoint;

/**
 * Azure Functions with HTTP Trigger.
 */
public class TriggerHandler {

    /**
     * This function listens at endpoint "/api/$functionName". Two ways to invoke it using "curl" command in bash:
     * 1. curl -d "HTTP Body" {your host}/api/$functionName
     * 2. curl "{your host}/api/$functionName?name=HTTP%20Query"
     * @throws Exception
     */
    @FunctionName("$functionName")
    public HttpResponseMessage run(
            @HttpTrigger(
                name = "req",
                methods = {$httpMethods},
                authLevel = $authLevel)
                HttpRequestMessage<Optional<String>> request,
            final ExecutionContext context) throws Exception {
        context.getLogger().info("Java HTTP trigger processed a request.");

        String body = "";
        if (request.getBody().isPresent())
            body = request.getBody().get();

        HttpMethod httpMethod = request.getHttpMethod();
        Exchange out;

        // create and start camel context
        try(CamelContext camelContext = new DefaultCamelContext()) {
            // register properties and route to camel context
            PropertiesComponent pc = new PropertiesComponent();
            pc.setLocation("classpath:application.properties");
            camelContext.setPropertiesComponent(pc);
            List<String> dbs = $databaseNames;
            for (String dbName : dbs) {
                camelContext.getRegistry().bind(dbName, setupDataSource(dbName));
            }
            camelContext.addRoutes(new FunctionRoute());

            // create endpoint to send exchange to
            FunctionEndpoint ep = (FunctionEndpoint) camelContext.getEndpoint("function:trigger");
            Exchange ex = ep.createExchange();
            ex.getIn().setHeader("http_method", httpMethod.toString());
            ex.getIn().setBody(body);

            // start context and push exchange to route
            camelContext.start();
            ProducerTemplate template = camelContext.createProducerTemplate();
            out = template.send(ep, ex);

            if (out.isFailed()) {
                Exception e = out.getException();
                context.getLogger().log(Level.SEVERE, e.getMessage());

                camelContext.stop();
                return request.createResponseBuilder(HttpStatus.INTERNAL_SERVER_ERROR).build();
            }

            // shutdown of camel context
            camelContext.stop();
        }

        if (httpMethod == HttpMethod.GET) {
            context.getLogger().info("Processing successful. Returning GET result.");
            return request.createResponseBuilder(HttpStatus.OK)
                .body(out.getIn().getBody(String.class))
                .build();
        } else {
            context.getLogger().info("Processing successful. Returning OK response.");
            return request.createResponseBuilder(HttpStatus.OK)
                .body("OK.")
                .build();
        }
    }

    private static BasicDataSource setupDataSource(String dbName) {
        BasicDataSource ds = new BasicDataSource();
        ds.setUsername(System.getenv("PSQL_USER_" + dbName));
        ds.setDriverClassName("org.postgresql.Driver");
        ds.setPassword(System.getenv("PSQL_PWD_" + dbName));
        ds.setUrl(System.getenv("PSQL_URL_" + dbName));
        ds.addConnectionProperty("sslmode", "require");
        return ds;
    }
}